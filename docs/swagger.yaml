basePath: /
definitions:
  user.AccessTokenResponse:
    properties:
      accessToken:
        type: string
    type: object
  user.CreateUserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  user.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  user.LoginResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  user.RefreshTokenInput:
    properties:
      refreshToken:
        type: string
    required:
    - refreshToken
    type: object
host: localhost:2019
info:
  contact:
    name: Reza Barzegar
    url: https://github.com/RezaBG
  description: This is a server for an inventory management system, built with Go
    and Gin.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Inventory Management API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns an access token and refresh token.
      parameters:
      - description: User Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/user.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Log in a user
      tags:
      - Auth
  /refresh_token:
    post:
      consumes:
      - application/json
      description: Issues a new access token in exchange for a valid refresh token.
      parameters:
      - description: Refresh Token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/user.RefreshTokenInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.AccessTokenResponse'
        "400":
          description: '{"error": "Error message"}'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: '{"error": "Invalid refresh token"}'
          schema:
            additionalProperties: true
            type: object
      summary: Refresh access token
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with the provided details.
      parameters:
      - description: User Registration Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and a valid JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
