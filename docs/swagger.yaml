basePath: /
definitions:
  inventory.CreateTransactionInput:
    properties:
      notes:
        type: string
      productID:
        type: integer
      quantityChange:
        type: integer
      type:
        allOf:
        - $ref: '#/definitions/inventory.TransactionType'
        enum:
        - stock_in
        - stock_out
        - adjustment
    required:
    - productID
    - quantityChange
    - type
    type: object
  inventory.TransactionResponse:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      notes:
        type: string
      productID:
        type: integer
      quantityChange:
        type: integer
      type:
        $ref: '#/definitions/inventory.TransactionType'
      userID:
        type: integer
    type: object
  inventory.TransactionType:
    enum:
    - stock_in
    - stock_out
    - adjustment
    type: string
    x-enum-varnames:
    - StockIn
    - StockOut
    - Adjustment
  product.CreateProductInput:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
    required:
    - name
    - price
    type: object
  product.ProductResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
    type: object
  product.UpdateProductInput:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  supplier.CreateSupplierInput:
    properties:
      contactPerson:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    required:
    - email
    - name
    type: object
  supplier.SupplierResponse:
    properties:
      contactPerson:
        type: string
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
    type: object
  supplier.UpdateSupplierInput:
    properties:
      contactPerson:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    required:
    - name
    type: object
  user.AccessTokenResponse:
    properties:
      accessToken:
        type: string
    type: object
  user.CreateUserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  user.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  user.LoginResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  user.RefreshTokenInput:
    properties:
      refreshToken:
        type: string
    required:
    - refreshToken
    type: object
host: localhost:2019
info:
  contact:
    name: Reza Barzegar
    url: https://github.com/RezaBG
  description: This is a server for an inventory management system, built with Go
    and Gin.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Inventory Management API
  version: "1.0"
paths:
  /inventory/transactions:
    post:
      consumes:
      - application/json
      description: Creates a new stock movement record. Use positive quantity for
        stock-in, negative for stock-out.
      parameters:
      - description: Transaction Details
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/inventory.CreateTransactionInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/inventory.TransactionResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create an inventory transaction
      tags:
      - Inventory
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns an access token and refresh token.
      parameters:
      - description: User Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/user.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Log in a user
      tags:
      - Auth
  /products:
    post:
      consumes:
      - application/json
      description: Adds a new product to the system. The initial quantity will be
        0.
      parameters:
      - description: Product Information
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/product.CreateProductInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/product.ProductResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - Products
  /products/{id}:
    delete:
      description: Deletes a product from the system by its ID.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - Products
    get:
      description: Retrieves the details of a single product, including its real-time
        inventory count.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.ProductResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get a single product
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: 'Updates a product''s details (e.g., name, price). Note: Quantity
        cannot be updated here.'
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product Update Information
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/product.UpdateProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.ProductResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - Products
  /refresh_token:
    post:
      consumes:
      - application/json
      description: Issues a new access token in exchange for a valid refresh token.
      parameters:
      - description: Refresh Token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/user.RefreshTokenInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.AccessTokenResponse'
        "400":
          description: '{"error": "Error message"}'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: '{"error": "Invalid refresh token"}'
          schema:
            additionalProperties: true
            type: object
      summary: Refresh access token
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with the provided details.
      parameters:
      - description: User Registration Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - Auth
  /suppliers:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/supplier.SupplierResponse'
            type: array
      security:
      - BearerAuth: []
      summary: Get all suppliers
      tags:
      - Suppliers
    post:
      consumes:
      - application/json
      parameters:
      - description: Supplier Information
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/supplier.CreateSupplierInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/supplier.SupplierResponse'
      security:
      - BearerAuth: []
      summary: Create a new supplier
      tags:
      - Suppliers
  /suppliers/{id}:
    delete:
      parameters:
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete a supplier
      tags:
      - Suppliers
    get:
      parameters:
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/supplier.SupplierResponse'
      security:
      - BearerAuth: []
      summary: Get a single supplier
      tags:
      - Suppliers
    put:
      consumes:
      - application/json
      parameters:
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: integer
      - description: Supplier Update Information
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/supplier.UpdateSupplierInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/supplier.SupplierResponse'
      security:
      - BearerAuth: []
      summary: Update a supplier
      tags:
      - Suppliers
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and a valid JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
